package rustelefonen.no.drikkevett_android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import rustelefonen.no.drikkevett_android.db.newHistory;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEW_HISTORY".
*/
public class newHistoryDao extends AbstractDao<newHistory, Long> {

    public static final String TABLENAME = "NEW_HISTORY";

    /**
     * Properties of entity newHistory.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BeerCost = new Property(1, Integer.class, "beerCost", false, "BEER_COST");
        public final static Property WineCost = new Property(2, Integer.class, "wineCost", false, "WINE_COST");
        public final static Property DrinkCost = new Property(3, Integer.class, "drinkCost", false, "DRINK_COST");
        public final static Property ShotCost = new Property(4, Integer.class, "shotCost", false, "SHOT_COST");
        public final static Property BeerGrams = new Property(5, Double.class, "beerGrams", false, "BEER_GRAMS");
        public final static Property WineGrams = new Property(6, Double.class, "wineGrams", false, "WINE_GRAMS");
        public final static Property DrinkGrams = new Property(7, Double.class, "drinkGrams", false, "DRINK_GRAMS");
        public final static Property ShotGrams = new Property(8, Double.class, "shotGrams", false, "SHOT_GRAMS");
        public final static Property BeerPlannedUnitCount = new Property(9, Integer.class, "beerPlannedUnitCount", false, "BEER_PLANNED_UNIT_COUNT");
        public final static Property WinePlannedUnitCount = new Property(10, Integer.class, "winePlannedUnitCount", false, "WINE_PLANNED_UNIT_COUNT");
        public final static Property DrinkPlannedUnitCount = new Property(11, Integer.class, "drinkPlannedUnitCount", false, "DRINK_PLANNED_UNIT_COUNT");
        public final static Property ShotPlannedUnitCount = new Property(12, Integer.class, "shotPlannedUnitCount", false, "SHOT_PLANNED_UNIT_COUNT");
        public final static Property BeginDate = new Property(13, java.util.Date.class, "beginDate", false, "BEGIN_DATE");
        public final static Property EndDate = new Property(14, java.util.Date.class, "endDate", false, "END_DATE");
        public final static Property Gender = new Property(15, Boolean.class, "gender", false, "GENDER");
        public final static Property Weight = new Property(16, Double.class, "weight", false, "WEIGHT");
    };

    private DaoSession daoSession;


    public newHistoryDao(DaoConfig config) {
        super(config);
    }
    
    public newHistoryDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEW_HISTORY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"BEER_COST\" INTEGER," + // 1: beerCost
                "\"WINE_COST\" INTEGER," + // 2: wineCost
                "\"DRINK_COST\" INTEGER," + // 3: drinkCost
                "\"SHOT_COST\" INTEGER," + // 4: shotCost
                "\"BEER_GRAMS\" REAL," + // 5: beerGrams
                "\"WINE_GRAMS\" REAL," + // 6: wineGrams
                "\"DRINK_GRAMS\" REAL," + // 7: drinkGrams
                "\"SHOT_GRAMS\" REAL," + // 8: shotGrams
                "\"BEER_PLANNED_UNIT_COUNT\" INTEGER," + // 9: beerPlannedUnitCount
                "\"WINE_PLANNED_UNIT_COUNT\" INTEGER," + // 10: winePlannedUnitCount
                "\"DRINK_PLANNED_UNIT_COUNT\" INTEGER," + // 11: drinkPlannedUnitCount
                "\"SHOT_PLANNED_UNIT_COUNT\" INTEGER," + // 12: shotPlannedUnitCount
                "\"BEGIN_DATE\" INTEGER," + // 13: beginDate
                "\"END_DATE\" INTEGER," + // 14: endDate
                "\"GENDER\" INTEGER," + // 15: gender
                "\"WEIGHT\" REAL);"); // 16: weight
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEW_HISTORY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, newHistory entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer beerCost = entity.getBeerCost();
        if (beerCost != null) {
            stmt.bindLong(2, beerCost);
        }
 
        Integer wineCost = entity.getWineCost();
        if (wineCost != null) {
            stmt.bindLong(3, wineCost);
        }
 
        Integer drinkCost = entity.getDrinkCost();
        if (drinkCost != null) {
            stmt.bindLong(4, drinkCost);
        }
 
        Integer shotCost = entity.getShotCost();
        if (shotCost != null) {
            stmt.bindLong(5, shotCost);
        }
 
        Double beerGrams = entity.getBeerGrams();
        if (beerGrams != null) {
            stmt.bindDouble(6, beerGrams);
        }
 
        Double wineGrams = entity.getWineGrams();
        if (wineGrams != null) {
            stmt.bindDouble(7, wineGrams);
        }
 
        Double drinkGrams = entity.getDrinkGrams();
        if (drinkGrams != null) {
            stmt.bindDouble(8, drinkGrams);
        }
 
        Double shotGrams = entity.getShotGrams();
        if (shotGrams != null) {
            stmt.bindDouble(9, shotGrams);
        }
 
        Integer beerPlannedUnitCount = entity.getBeerPlannedUnitCount();
        if (beerPlannedUnitCount != null) {
            stmt.bindLong(10, beerPlannedUnitCount);
        }
 
        Integer winePlannedUnitCount = entity.getWinePlannedUnitCount();
        if (winePlannedUnitCount != null) {
            stmt.bindLong(11, winePlannedUnitCount);
        }
 
        Integer drinkPlannedUnitCount = entity.getDrinkPlannedUnitCount();
        if (drinkPlannedUnitCount != null) {
            stmt.bindLong(12, drinkPlannedUnitCount);
        }
 
        Integer shotPlannedUnitCount = entity.getShotPlannedUnitCount();
        if (shotPlannedUnitCount != null) {
            stmt.bindLong(13, shotPlannedUnitCount);
        }
 
        java.util.Date beginDate = entity.getBeginDate();
        if (beginDate != null) {
            stmt.bindLong(14, beginDate.getTime());
        }
 
        java.util.Date endDate = entity.getEndDate();
        if (endDate != null) {
            stmt.bindLong(15, endDate.getTime());
        }
 
        Boolean gender = entity.getGender();
        if (gender != null) {
            stmt.bindLong(16, gender ? 1L: 0L);
        }
 
        Double weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(17, weight);
        }
    }

    @Override
    protected void attachEntity(newHistory entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public newHistory readEntity(Cursor cursor, int offset) {
        newHistory entity = new newHistory( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // beerCost
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // wineCost
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // drinkCost
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // shotCost
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // beerGrams
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // wineGrams
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // drinkGrams
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // shotGrams
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // beerPlannedUnitCount
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // winePlannedUnitCount
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // drinkPlannedUnitCount
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // shotPlannedUnitCount
            cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)), // beginDate
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // endDate
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0, // gender
            cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16) // weight
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, newHistory entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBeerCost(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setWineCost(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDrinkCost(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setShotCost(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setBeerGrams(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setWineGrams(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setDrinkGrams(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setShotGrams(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setBeerPlannedUnitCount(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setWinePlannedUnitCount(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDrinkPlannedUnitCount(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setShotPlannedUnitCount(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setBeginDate(cursor.isNull(offset + 13) ? null : new java.util.Date(cursor.getLong(offset + 13)));
        entity.setEndDate(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setGender(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
        entity.setWeight(cursor.isNull(offset + 16) ? null : cursor.getDouble(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(newHistory entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(newHistory entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
