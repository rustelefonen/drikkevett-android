package rustelefonen.no.drikkevett_android.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import rustelefonen.no.drikkevett_android.db.PlanPartyElements;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN_PARTY_ELEMENTS".
*/
public class PlanPartyElementsDao extends AbstractDao<PlanPartyElements, Void> {

    public static final String TABLENAME = "PLAN_PARTY_ELEMENTS";

    /**
     * Properties of entity PlanPartyElements.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Status = new Property(0, String.class, "status", false, "STATUS");
        public final static Property PlannedBeer = new Property(1, Integer.class, "plannedBeer", false, "PLANNED_BEER");
        public final static Property PlannedWine = new Property(2, Integer.class, "plannedWine", false, "PLANNED_WINE");
        public final static Property PlannedDrink = new Property(3, Integer.class, "plannedDrink", false, "PLANNED_DRINK");
        public final static Property PlannedShot = new Property(4, Integer.class, "plannedShot", false, "PLANNED_SHOT");
    };


    public PlanPartyElementsDao(DaoConfig config) {
        super(config);
    }
    
    public PlanPartyElementsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN_PARTY_ELEMENTS\" (" + //
                "\"STATUS\" TEXT," + // 0: status
                "\"PLANNED_BEER\" INTEGER," + // 1: plannedBeer
                "\"PLANNED_WINE\" INTEGER," + // 2: plannedWine
                "\"PLANNED_DRINK\" INTEGER," + // 3: plannedDrink
                "\"PLANNED_SHOT\" INTEGER);"); // 4: plannedShot
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN_PARTY_ELEMENTS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PlanPartyElements entity) {
        stmt.clearBindings();
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(1, status);
        }
 
        Integer plannedBeer = entity.getPlannedBeer();
        if (plannedBeer != null) {
            stmt.bindLong(2, plannedBeer);
        }
 
        Integer plannedWine = entity.getPlannedWine();
        if (plannedWine != null) {
            stmt.bindLong(3, plannedWine);
        }
 
        Integer plannedDrink = entity.getPlannedDrink();
        if (plannedDrink != null) {
            stmt.bindLong(4, plannedDrink);
        }
 
        Integer plannedShot = entity.getPlannedShot();
        if (plannedShot != null) {
            stmt.bindLong(5, plannedShot);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public PlanPartyElements readEntity(Cursor cursor, int offset) {
        PlanPartyElements entity = new PlanPartyElements( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // status
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // plannedBeer
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // plannedWine
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // plannedDrink
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // plannedShot
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PlanPartyElements entity, int offset) {
        entity.setStatus(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPlannedBeer(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPlannedWine(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPlannedDrink(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPlannedShot(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(PlanPartyElements entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(PlanPartyElements entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
