package rustelefonen.no.drikkevett_android.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import rustelefonen.no.drikkevett_android.db.DayAfterBACDao;
import rustelefonen.no.drikkevett_android.db.GraphHistoryDao;
import rustelefonen.no.drikkevett_android.db.HistoryDao;
import rustelefonen.no.drikkevett_android.db.UserDao;
import rustelefonen.no.drikkevett_android.db.PlanPartyElementsDao;
import rustelefonen.no.drikkevett_android.db.InformationCategoryDao;
import rustelefonen.no.drikkevett_android.db.InformationDao;
import rustelefonen.no.drikkevett_android.db.UnitDao;
import rustelefonen.no.drikkevett_android.db.newHistoryDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        DayAfterBACDao.createTable(db, ifNotExists);
        GraphHistoryDao.createTable(db, ifNotExists);
        HistoryDao.createTable(db, ifNotExists);
        UserDao.createTable(db, ifNotExists);
        PlanPartyElementsDao.createTable(db, ifNotExists);
        InformationCategoryDao.createTable(db, ifNotExists);
        InformationDao.createTable(db, ifNotExists);
        UnitDao.createTable(db, ifNotExists);
        newHistoryDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        DayAfterBACDao.dropTable(db, ifExists);
        GraphHistoryDao.dropTable(db, ifExists);
        HistoryDao.dropTable(db, ifExists);
        UserDao.dropTable(db, ifExists);
        PlanPartyElementsDao.dropTable(db, ifExists);
        InformationCategoryDao.dropTable(db, ifExists);
        InformationDao.dropTable(db, ifExists);
        UnitDao.dropTable(db, ifExists);
        newHistoryDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(DayAfterBACDao.class);
        registerDaoClass(GraphHistoryDao.class);
        registerDaoClass(HistoryDao.class);
        registerDaoClass(UserDao.class);
        registerDaoClass(PlanPartyElementsDao.class);
        registerDaoClass(InformationCategoryDao.class);
        registerDaoClass(InformationDao.class);
        registerDaoClass(UnitDao.class);
        registerDaoClass(newHistoryDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
