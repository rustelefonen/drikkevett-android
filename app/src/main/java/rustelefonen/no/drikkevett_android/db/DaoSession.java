package rustelefonen.no.drikkevett_android.db;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import rustelefonen.no.drikkevett_android.db.DayAfterBAC;
import rustelefonen.no.drikkevett_android.db.GraphHistory;
import rustelefonen.no.drikkevett_android.db.History;
import rustelefonen.no.drikkevett_android.db.User;

import rustelefonen.no.drikkevett_android.db.DayAfterBACDao;
import rustelefonen.no.drikkevett_android.db.GraphHistoryDao;
import rustelefonen.no.drikkevett_android.db.HistoryDao;
import rustelefonen.no.drikkevett_android.db.UserDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig dayAfterBACDaoConfig;
    private final DaoConfig graphHistoryDaoConfig;
    private final DaoConfig historyDaoConfig;
    private final DaoConfig userDaoConfig;

    private final DayAfterBACDao dayAfterBACDao;
    private final GraphHistoryDao graphHistoryDao;
    private final HistoryDao historyDao;
    private final UserDao userDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        dayAfterBACDaoConfig = daoConfigMap.get(DayAfterBACDao.class).clone();
        dayAfterBACDaoConfig.initIdentityScope(type);

        graphHistoryDaoConfig = daoConfigMap.get(GraphHistoryDao.class).clone();
        graphHistoryDaoConfig.initIdentityScope(type);

        historyDaoConfig = daoConfigMap.get(HistoryDao.class).clone();
        historyDaoConfig.initIdentityScope(type);

        userDaoConfig = daoConfigMap.get(UserDao.class).clone();
        userDaoConfig.initIdentityScope(type);

        dayAfterBACDao = new DayAfterBACDao(dayAfterBACDaoConfig, this);
        graphHistoryDao = new GraphHistoryDao(graphHistoryDaoConfig, this);
        historyDao = new HistoryDao(historyDaoConfig, this);
        userDao = new UserDao(userDaoConfig, this);

        registerDao(DayAfterBAC.class, dayAfterBACDao);
        registerDao(GraphHistory.class, graphHistoryDao);
        registerDao(History.class, historyDao);
        registerDao(User.class, userDao);
    }
    
    public void clear() {
        dayAfterBACDaoConfig.getIdentityScope().clear();
        graphHistoryDaoConfig.getIdentityScope().clear();
        historyDaoConfig.getIdentityScope().clear();
        userDaoConfig.getIdentityScope().clear();
    }

    public DayAfterBACDao getDayAfterBACDao() {
        return dayAfterBACDao;
    }

    public GraphHistoryDao getGraphHistoryDao() {
        return graphHistoryDao;
    }

    public HistoryDao getHistoryDao() {
        return historyDao;
    }

    public UserDao getUserDao() {
        return userDao;
    }

}
