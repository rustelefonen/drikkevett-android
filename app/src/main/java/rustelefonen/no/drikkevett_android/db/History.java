package rustelefonen.no.drikkevett_android.db;

import java.util.List;
import rustelefonen.no.drikkevett_android.db.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "HISTORY".
 */
public class History {

    private Long id;
    private Integer drinkCount;
    private Integer beerCount;
    private Integer shotCount;
    private Integer wineCount;
    private java.util.Date startDate;
    private java.util.Date endDate;
    private Integer sum;
    private Double highestBAC;
    private Integer plannedUnitsCount;
    private java.util.Date firstUnitDate;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient HistoryDao myDao;

    private List<GraphHistory> graphHistories;

    public History() {
    }

    public History(Long id) {
        this.id = id;
    }

    public History(Long id, Integer drinkCount, Integer beerCount, Integer shotCount, Integer wineCount, java.util.Date startDate, java.util.Date endDate, Integer sum, Double highestBAC, Integer plannedUnitsCount, java.util.Date firstUnitDate) {
        this.id = id;
        this.drinkCount = drinkCount;
        this.beerCount = beerCount;
        this.shotCount = shotCount;
        this.wineCount = wineCount;
        this.startDate = startDate;
        this.endDate = endDate;
        this.sum = sum;
        this.highestBAC = highestBAC;
        this.plannedUnitsCount = plannedUnitsCount;
        this.firstUnitDate = firstUnitDate;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHistoryDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getDrinkCount() {
        return drinkCount;
    }

    public void setDrinkCount(Integer drinkCount) {
        this.drinkCount = drinkCount;
    }

    public Integer getBeerCount() {
        return beerCount;
    }

    public void setBeerCount(Integer beerCount) {
        this.beerCount = beerCount;
    }

    public Integer getShotCount() {
        return shotCount;
    }

    public void setShotCount(Integer shotCount) {
        this.shotCount = shotCount;
    }

    public Integer getWineCount() {
        return wineCount;
    }

    public void setWineCount(Integer wineCount) {
        this.wineCount = wineCount;
    }

    public java.util.Date getStartDate() {
        return startDate;
    }

    public void setStartDate(java.util.Date startDate) {
        this.startDate = startDate;
    }

    public java.util.Date getEndDate() {
        return endDate;
    }

    public void setEndDate(java.util.Date endDate) {
        this.endDate = endDate;
    }

    public Integer getSum() {
        return sum;
    }

    public void setSum(Integer sum) {
        this.sum = sum;
    }

    public Double getHighestBAC() {
        return highestBAC;
    }

    public void setHighestBAC(Double highestBAC) {
        this.highestBAC = highestBAC;
    }

    public Integer getPlannedUnitsCount() {
        return plannedUnitsCount;
    }

    public void setPlannedUnitsCount(Integer plannedUnitsCount) {
        this.plannedUnitsCount = plannedUnitsCount;
    }

    public java.util.Date getFirstUnitDate() {
        return firstUnitDate;
    }

    public void setFirstUnitDate(java.util.Date firstUnitDate) {
        this.firstUnitDate = firstUnitDate;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<GraphHistory> getGraphHistories() {
        if (graphHistories == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GraphHistoryDao targetDao = daoSession.getGraphHistoryDao();
            List<GraphHistory> graphHistoriesNew = targetDao._queryHistory_GraphHistories(id);
            synchronized (this) {
                if(graphHistories == null) {
                    graphHistories = graphHistoriesNew;
                }
            }
        }
        return graphHistories;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGraphHistories() {
        graphHistories = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
